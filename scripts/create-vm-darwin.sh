#!/bin/bash


# create-vm-darwin.sh - Generates a QEMU VM launcher script.
#
# Usage:
#   create-vm-darwin.sh vm1
#
# If no name is provided, the script will prompt you for a VM script name.
# The generated file (e.g. vm1.sh) will be placed in the BIN_PATH, which defaults
# to ./ if not defined.
#
# The generated script includes the current template configured for launching
# a QEMU VM on macOS (ARM64) with dynamic port allocation, disk image creation,
# and monitor access via telnet. Edit the generated script as needed.
#

# Set BIN_PATH if not already defined in the environment
BIN_PATH="${BIN_PATH:-.}"

# Determine the VM script name from the first argument or prompt the user.
if [ -z "$1" ]; then
    read -p "Enter VM script name (without extension): " VM_SCRIPT_NAME
else
    VM_SCRIPT_NAME="$1"
fi

OUTPUT_SCRIPT="${BIN_PATH}/${VM_SCRIPT_NAME}.sh"

cat << 'EOF' > "$OUTPUT_SCRIPT"
#!/bin/bash
# ----- Generated QEMU VM Script -----
# This script launches a QEMU VM with the configured parameters.
#
# Usage:
#   $(basename "$0") [options]
#
# Options:
#   -i, --iso PATH       Path to ISO file for installation
#   -m, --memory SIZE    Memory size (default: 4G)
#   -c, --cpus NUM       Number of CPUs (default: 4)
#   -s, --ssh-port PORT  SSH port forwarding (if not set, a random port is generated)
#   -d, --daemon         Run in daemon mode (background)
#   -h, --help           Display this help message
#
# Generated by create-vm-darwin.sh
# -----------------------------------------
# Path to QEMU binary and BIOS
QEMU_BIN="/opt/homebrew/bin/qemu-system-aarch64"
QEMU_BIOS="/opt/homebrew/share/qemu/edk2-aarch64-code.fd"
QEMU_IMG="/opt/homebrew/bin/qemu-img"

# VM Name is determined from this script's filename
VM_NAME=$(basename "$0" .sh)
VM_DIR="$HOME/vm"
VM_DISK="$VM_DIR/${VM_NAME}.qcow2"

# Network configuration - customizable SSH and monitor ports.
SSH_PORT="${SSH_PORT:-}"
MONITOR_PORT="${MONITOR_PORT:-}"

# Log and PID files
LOG_DIR="$HOME/Library/Logs/qemu"
LOG_FILE="$LOG_DIR/${VM_NAME}.log"
PID_FILE="$VM_DIR/${VM_NAME}.pid"

# Ensure required directories exist.
mkdir -p "$VM_DIR" "$LOG_DIR"

usage() {
    echo "Usage: $(basename "$0") [options]"
    echo "Options:"
    echo "  -i, --iso PATH       Path to ISO file for installation"
    echo "  -m, --memory SIZE    Memory size (default: 4G)"
    echo "  -c, --cpus NUM       Number of CPUs (default: 4)"
    echo "  -s, --ssh-port PORT  SSH port forwarding (if not set, a random port is generated)"
    echo "  -d, --daemon         Run in daemon mode (background)"
    echo "  -h, --help           Display help message"
    exit 1
}

DAEMON_MODE=0
MEMORY="4G"
CPUS=4
ISO_PATH=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -i|--iso)
            ISO_PATH="$2"
            shift 2
            ;;
        -m|--memory)
            MEMORY="$2"
            shift 2
            ;;
        -c|--cpus)
            CPUS="$2"
            shift 2
            ;;
        -s|--ssh-port)
            SSH_PORT="$2"
            shift 2
            ;;
        -d|--daemon)
            DAEMON_MODE=1
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            if [[ -z "$ISO_PATH" && -f "$1" ]]; then
                ISO_PATH="$1"
                shift
            else
                echo "Unknown option: $1"
                usage
            fi
            ;;
    esac
done

# Generate random ports if not set explicitly
if [ -z "$SSH_PORT" ]; then
    SSH_PORT=$(( (RANDOM % 63000) + 2000 ))
fi

if [ -z "$MONITOR_PORT" ]; then
    MONITOR_PORT=$(( (RANDOM % 63000) + 2000 ))
fi

cleanup() {
    echo -e "\nStopping VM..."
    if [ -f "$PID_FILE" ]; then
        VM_PID=$(cat "$PID_FILE")
        if kill -0 "$VM_PID" 2>/dev/null; then
            kill "$VM_PID" && echo "VM process ($VM_PID) terminated."
            rm -f "$PID_FILE"
        else
            echo "No running VM process found."
        fi
    fi
    exit 0
}
trap cleanup SIGINT SIGTERM

if [ ! -f "$VM_DISK" ]; then
    echo "Creating disk image: $VM_DISK (20GB)"
    $QEMU_IMG create -f qcow2 "$VM_DISK" 20G
    if [ $? -eq 0 ]; then
        echo "Disk image created successfully."
    else
        echo "Failed to create disk image." >&2
        exit 1
    fi
fi

ISO_PARAM=""
if [ -n "$ISO_PATH" ] && [ -f "$ISO_PATH" ]; then
    echo "Using installation ISO: $ISO_PATH"
    ISO_PARAM="-cdrom $ISO_PATH"
fi

if [ -f "$PID_FILE" ]; then
    if kill -0 $(cat "$PID_FILE") 2>/dev/null; then
        echo "VM is already running with PID $(cat "$PID_FILE")."
        echo "Access monitor via: telnet localhost $MONITOR_PORT"
        echo "SSH access via: ssh -p $SSH_PORT <user>@localhost"
        exit 1
    else
        echo "Removing stale PID file."
        rm -f "$PID_FILE"
    fi
fi

QEMU_CMD="$QEMU_BIN \
  -M virt \
  -accel hvf \
  -cpu host \
  -m $MEMORY \
  -smp $CPUS \
  -bios \"$QEMU_BIOS\" \
  -drive file=\"$VM_DISK\",format=qcow2 \
  $ISO_PARAM \
  -device virtio-net-pci,netdev=net0 \
  -netdev user,id=net0,hostfwd=tcp::${SSH_PORT}-:22 \
  -name \"$VM_NAME\" \
  -monitor telnet:127.0.0.1:${MONITOR_PORT},server,nowait \
  -pidfile \"$PID_FILE\""

if [ $DAEMON_MODE -eq 1 ]; then
    echo "Starting VM in background mode: $VM_NAME"
    eval "$QEMU_CMD -daemonize >> \"$LOG_FILE\" 2>&1"
    sleep 2
    if [ -f "$PID_FILE" ] && kill -0 $(cat "$PID_FILE") 2>/dev/null; then
        echo "VM started successfully with PID $(cat "$PID_FILE")"
        echo "Monitor access: telnet localhost $MONITOR_PORT"
        echo "SSH access: ssh -p $SSH_PORT <user>@localhost"
        echo "Log file: $LOG_FILE"
    else
        echo "Failed to start VM. Check log at $LOG_FILE"
        exit 1
    fi
else
    echo "Starting VM: $VM_NAME"
    echo "Monitor will be available at: telnet localhost $MONITOR_PORT"
    echo "SSH will be available at: ssh -p $SSH_PORT <user>@localhost"
    echo "Press Ctrl+C to stop the VM"
    eval "$QEMU_CMD -nographic 2>&1 | tee -a \"$LOG_FILE\""
    [ -f "$PID_FILE" ] && rm -f "$PID_FILE"
    echo "VM has stopped."
fi
EOF

# Make the generated VM script executable.
chmod +x "$OUTPUT_SCRIPT"

echo "Generated VM script at: $OUTPUT_SCRIPT"