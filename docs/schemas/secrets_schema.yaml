# Infrastructure Secrets Schema
# JSON Schema Draft-07 format for validating SOPS-encrypted secret files
# This schema defines structure and validation rules for all secret categories

$schema: http://json-schema.org/draft-07/schema#
$id: https://github.com/mi-skam/infra/schemas/secrets_schema.yaml
title: Infrastructure Secrets Validation Schema
description: |
  Validation schema for SOPS-encrypted secret files in the infrastructure repository.
  Defines structure, required fields, data types, and validation rules for all secret categories.

  Secret Files Coverage:
  - hetzner.yaml (EXISTING) - Hetzner Cloud API credentials
  - storagebox.yaml (EXISTING) - Hetzner Storage Box backup credentials
  - users.yaml (PLANNED) - User account passwords for NixOS systems
  - ssh-keys.yaml (PLANNED) - SSH private keys for system access
  - pgp-keys.yaml (PLANNED) - PGP private keys for encryption/signing

definitions:
  # ============================================================================
  # EXISTING SECRET FILES
  # ============================================================================

  # Hetzner Cloud API credentials
  # File: secrets/hetzner.yaml
  # Purpose: API token for OpenTofu infrastructure provisioning
  hetzner_secrets:
    type: object
    description: Hetzner Cloud API credentials for infrastructure provisioning
    properties:
      hcloud:
        type: string
        description: Hetzner Cloud API token (64-character alphanumeric string)
        pattern: "^[A-Za-z0-9]{64}$"
        minLength: 64
        maxLength: 64
    required:
      - hcloud
    additionalProperties: false

  # Hetzner Storage Box credentials
  # File: secrets/storagebox.yaml
  # Purpose: Credentials for mounting and accessing Hetzner Storage Box for backups
  storagebox_secrets:
    type: object
    description: Hetzner Storage Box credentials for backup infrastructure
    properties:
      storagebox:
        type: object
        description: Storage Box connection and authentication details
        properties:
          username:
            type: string
            description: "Storage Box username (format: uXXXXXX-subN)"
            pattern: "^u[0-9]+-sub[0-9]+$"
            minLength: 8
            maxLength: 32
          password:
            type: string
            description: "Storage Box password (alphanumeric, 12-64 characters)"
            pattern: "^[A-Za-z0-9]{12,64}$"
            minLength: 12
            maxLength: 64
          host:
            type: string
            description: "Storage Box hostname (format: uXXXXXX.your-storagebox.de)"
            pattern: "^u[0-9]+\\.your-storagebox\\.de$"
            minLength: 10
            maxLength: 100
          mount_point:
            type: string
            description: Absolute filesystem path for mounting the storage box
            pattern: "^/[a-zA-Z0-9/_-]+$"
            minLength: 1
            maxLength: 255
        required:
          - username
          - password
          - host
          - mount_point
        additionalProperties: false
    required:
      - storagebox
    additionalProperties: false

  # ============================================================================
  # PLANNED SECRET FILES
  # ============================================================================

  # User account passwords for NixOS systems
  # File: secrets/users.yaml (PLANNED)
  # Purpose: Hashed user passwords for NixOS user account management
  users_secrets:
    type: object
    description: User account passwords for NixOS systems (hashed with bcrypt/sha512crypt)
    properties:
      users:
        type: object
        description: Mapping of username to hashed password
        patternProperties:
          "^[a-z][a-z0-9_-]{2,31}$":
            type: object
            description: User account configuration
            properties:
              password_hash:
                type: string
                description: |
                  Hashed password in bcrypt ($2b$) or sha512crypt ($6$) format.
                  Generated with: mkpasswd -m sha-512 or mkpasswd -m bcrypt
                pattern: "^(\\$2[aby]?\\$[0-9]{2}\\$[./A-Za-z0-9]{53}|\\$6\\$[./A-Za-z0-9]{1,16}\\$[./A-Za-z0-9]{86})$"
                minLength: 60
              description:
                type: string
                description: Optional description of the user account
                maxLength: 200
            required:
              - password_hash
            additionalProperties: false
        minProperties: 1
    required:
      - users
    additionalProperties: false

  # SSH private keys for system access
  # File: secrets/ssh-keys.yaml (PLANNED)
  # Purpose: Private SSH keys for automated system access and deployment
  ssh_keys_secrets:
    type: object
    description: SSH private keys for system access and automation
    properties:
      ssh_keys:
        type: object
        description: Mapping of key name to private key content
        patternProperties:
          "^[a-z][a-z0-9_-]{2,63}$":
            type: object
            description: SSH key configuration
            properties:
              private_key:
                type: string
                description: |
                  SSH private key in OpenSSH format (RSA, Ed25519, ECDSA).
                  Must begin with: -----BEGIN OPENSSH PRIVATE KEY-----
                  Or: -----BEGIN RSA PRIVATE KEY----- (legacy format)
                pattern: "^-----BEGIN (OPENSSH|RSA|EC|DSA) PRIVATE KEY-----"
                minLength: 100
              key_type:
                type: string
                description: SSH key algorithm type
                enum:
                  - rsa
                  - ed25519
                  - ecdsa
                  - dsa
              description:
                type: string
                description: Purpose or system where this key is used
                maxLength: 200
              key_size:
                type: integer
                description: Key size in bits (2048/4096 for RSA, 256 for Ed25519)
                minimum: 256
                maximum: 8192
            required:
              - private_key
              - key_type
            additionalProperties: false
        minProperties: 1
    required:
      - ssh_keys
    additionalProperties: false

  # PGP private keys for encryption and signing
  # File: secrets/pgp-keys.yaml (PLANNED)
  # Purpose: PGP private keys for email encryption, signing, and SOPS alternative
  pgp_keys_secrets:
    type: object
    description: PGP/GPG private keys for encryption and code signing
    properties:
      pgp_keys:
        type: object
        description: Mapping of key identifier to private key content
        patternProperties:
          "^[a-z][a-z0-9_-]{2,63}$":
            type: object
            description: PGP key configuration
            properties:
              private_key:
                type: string
                description: |
                  PGP private key in ASCII-armored format.
                  Must begin with: -----BEGIN PGP PRIVATE KEY BLOCK-----
                pattern: "^-----BEGIN PGP PRIVATE KEY BLOCK-----"
                minLength: 100
              key_id:
                type: string
                description: PGP key ID (40-character hex fingerprint or 16-character short ID)
                pattern: "^(0x)?[A-Fa-f0-9]{16,40}$"
                minLength: 16
                maxLength: 42
              email:
                type: string
                description: Email address associated with this PGP key
                format: email
                maxLength: 254
              description:
                type: string
                description: Purpose or usage context for this key
                maxLength: 200
              key_algorithm:
                type: string
                description: PGP key algorithm (RSA, EdDSA, etc.)
                enum:
                  - RSA
                  - EdDSA
                  - ECDSA
                  - DSA
            required:
              - private_key
              - key_id
            additionalProperties: false
        minProperties: 1
    required:
      - pgp_keys
    additionalProperties: false

# ============================================================================
# VALIDATION EXAMPLES
# ============================================================================

examples:
  # Example 1: Hetzner Cloud API token (EXISTING)
  hetzner_example:
    description: Valid Hetzner Cloud API credentials
    valid: true
    data:
      hcloud: "cGHKAOaRPKoS2d8c1pC8tP26d8Qrwbev8OxFzjAarSqJq4sln2fN8qw6CItA6oiS"

  # Example 2: Hetzner Storage Box credentials (EXISTING)
  storagebox_example:
    description: Valid Hetzner Storage Box credentials
    valid: true
    data:
      storagebox:
        username: "u461499-sub2"
        password: "hetM6NdsALhf8qc6"
        host: "u461499.your-storagebox.de"
        mount_point: "/mnt/storagebox"

  # Example 3: User passwords (PLANNED)
  users_example:
    description: Valid user account passwords with bcrypt hashes
    valid: true
    data:
      users:
        mi-skam:
          password_hash: "$6$rounds=656000$YQQvJ5T9J9F0x$6LMZNNKpJWPxdvKzJ8L4T9x7GHQvJ5T9J9F0x1YQQvJ5T9J9F0xYQQvJ5T9J9"
          description: "Primary operator account"
        plumps:
          password_hash: "$2b$12$LwBvJ5T9J9F0xYQQvJ5T9OeD8L4T9x7GHQvJ5T9J9F0x1YQQJ9F0x"
          description: "Secondary operator account"

  # Example 4: SSH private keys (PLANNED)
  ssh_keys_example:
    description: Valid SSH private key configuration
    valid: true
    data:
      ssh_keys:
        homelab-hetzner:
          private_key: |
            -----BEGIN OPENSSH PRIVATE KEY-----
            b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
            ... (truncated for brevity)
            -----END OPENSSH PRIVATE KEY-----
          key_type: "ed25519"
          description: "SSH key for Hetzner Cloud VPS access"
          key_size: 256
        deploy-automation:
          private_key: |
            -----BEGIN RSA PRIVATE KEY-----
            MIIEpAIBAAKCAQEAw8L4T9x7GHQvJ5T9J9F0x1YQQvJ5T9J9F0xYQQvJ5T9J9F0x
            ... (truncated for brevity)
            -----END RSA PRIVATE KEY-----
          key_type: "rsa"
          description: "RSA key for CI/CD deployment automation"
          key_size: 4096

  # Example 5: PGP private keys (PLANNED)
  pgp_keys_example:
    description: Valid PGP private key configuration
    valid: true
    data:
      pgp_keys:
        mi-skam-signing:
          private_key: |
            -----BEGIN PGP PRIVATE KEY BLOCK-----
            Version: GnuPG v2.2

            lQdGBF9... (truncated for brevity)
            -----END PGP PRIVATE KEY BLOCK-----
          key_id: "0x1234567890ABCDEF1234567890ABCDEF12345678"
          email: "maxime@example.com"
          description: "Code signing and commit verification key"
          key_algorithm: "EdDSA"
        backup-encryption:
          private_key: |
            -----BEGIN PGP PRIVATE KEY BLOCK-----
            Version: GnuPG v2.2

            lQdGBF9... (truncated for brevity)
            -----END PGP PRIVATE KEY BLOCK-----
          key_id: "ABCDEF1234567890"
          email: "backup@example.com"
          description: "GPG key for backup encryption"
          key_algorithm: "RSA"

  # Invalid examples for testing validation
  invalid_examples:
    # Invalid: Hetzner token too short
    - description: "Hetzner token with incorrect length"
      valid: false
      schema: "hetzner_secrets"
      data:
        hcloud: "shorttoken123"

    # Invalid: Missing required field
    - description: "Storage Box missing required host field"
      valid: false
      schema: "storagebox_secrets"
      data:
        storagebox:
          username: "u461499-sub2"
          password: "hetM6NdsALhf8qc6"
          mount_point: "/mnt/storagebox"

    # Invalid: Weak password hash
    - description: "User password with invalid hash format"
      valid: false
      schema: "users_secrets"
      data:
        users:
          testuser:
            password_hash: "plaintext_password_not_hashed"

    # Invalid: Wrong SSH key format
    - description: "SSH key missing BEGIN marker"
      valid: false
      schema: "ssh_keys_secrets"
      data:
        ssh_keys:
          broken-key:
            private_key: "notavalidkey"
            key_type: "ed25519"

    # Invalid: PGP key with malformed key_id
    - description: "PGP key with invalid key ID format"
      valid: false
      schema: "pgp_keys_secrets"
      data:
        pgp_keys:
          bad-key:
            private_key: "-----BEGIN PGP PRIVATE KEY BLOCK-----\n...\n"
            key_id: "INVALID_KEY_ID_FORMAT!"

# ============================================================================
# SCHEMA USAGE AND VALIDATION APPROACH
# ============================================================================

usage:
  description: |
    This schema defines validation rules for all SOPS-encrypted secret files.
    It can be used with JSON Schema validators to ensure secrets are correctly
    formatted before encryption or after decryption.

  validation_workflow: |
    1. Decrypt secret file with SOPS:
       sops -d secrets/hetzner.yaml > /tmp/decrypted.yaml

    2. Validate against schema using a JSON Schema validator:
       # Python example with jsonschema
       python3 scripts/validate-secrets.py secrets/hetzner.yaml

       # Or manually with yq + jsonschema CLI
       yq eval -o=json /tmp/decrypted.yaml | \
         jsonschema -i /dev/stdin docs/schemas/secrets_schema.yaml

    3. Report validation errors with specific field and rule violations

  validation_script:
    location: "scripts/validate-secrets.sh"
    implementation_task: "I2.T2"
    description: |
      The validation script (to be implemented in I2.T2) will:
      - Iterate through all encrypted secret files
      - Decrypt each file temporarily
      - Validate structure against this schema
      - Check required fields, data types, and validation patterns
      - Report violations with actionable error messages
      - Clean up temporary decrypted files

  schema_maintenance:
    description: |
      When adding new secret files or modifying existing structures:
      1. Update this schema with new definitions
      2. Add corresponding examples (valid and invalid)
      3. Test validation script against updated schema
      4. Update CLAUDE.md with new secret file documentation
      5. Run validation against all existing secret files

  security_notes:
    - "Never include actual secret values in this schema file"
    - "Use clearly fake/example values in examples section"
    - "Validation should occur on decrypted content, not encrypted YAML"
    - "Temporary decrypted files must be securely deleted after validation"
    - "Schema itself is safe to commit to version control"

# ============================================================================
# IMPLEMENTATION STATUS
# ============================================================================

implementation_status:
  existing_files:
    - name: "secrets/hetzner.yaml"
      status: "active"
      schema_definition: "hetzner_secrets"
      last_verified: "2025-10-29"

    - name: "secrets/storagebox.yaml"
      status: "active"
      schema_definition: "storagebox_secrets"
      last_verified: "2025-10-29"

  planned_files:
    - name: "secrets/users.yaml"
      status: "planned"
      schema_definition: "users_secrets"
      implementation_iteration: "I3"
      description: "User password management for NixOS systems"

    - name: "secrets/ssh-keys.yaml"
      status: "planned"
      schema_definition: "ssh_keys_secrets"
      implementation_iteration: "I3"
      description: "SSH private keys for automated deployment"

    - name: "secrets/pgp-keys.yaml"
      status: "planned"
      schema_definition: "pgp_keys_secrets"
      implementation_iteration: "I3"
      description: "PGP keys for signing and encryption"

  excluded_files:
    - name: "secrets/authorized_keys"
      reason: "Plain text SSH public keys, not YAML format"
      validation_approach: "SSH key format validation (separate tooling)"

# ============================================================================
# RELATED DOCUMENTATION
# ============================================================================

related_docs:
  - "CLAUDE.md - Secrets Management section"
  - "docs/architecture/05_Operational_Architecture.md - Section 3.8.1 Authentication & Authorization"
  - "docs/refactoring/baseline_report.md - Section 3.3 Secret Management Assessment"
  - "docs/schemas/README.md - Schema directory overview"
  - ".sops.yaml - SOPS encryption configuration"
