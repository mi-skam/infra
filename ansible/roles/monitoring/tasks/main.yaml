---
# Monitoring role tasks

# node_exporter installation
- name: Create node_exporter system group
  ansible.builtin.group:
    name: "{{ node_exporter_group }}"
    system: true
    state: present
  tags: [monitoring, install, node_exporter]

- name: Create node_exporter system user
  ansible.builtin.user:
    name: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    system: true
    shell: /usr/sbin/nologin
    create_home: false
    state: present
  tags: [monitoring, install, node_exporter]

- name: Download node_exporter binary
  ansible.builtin.get_url:
    url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}.tar.gz"
    dest: "/tmp/node_exporter-{{ node_exporter_version }}.tar.gz"
    mode: '0644'
  tags: [monitoring, install, node_exporter]

- name: Extract node_exporter binary
  ansible.builtin.unarchive:
    src: "/tmp/node_exporter-{{ node_exporter_version }}.tar.gz"
    dest: /tmp
    remote_src: true
    creates: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}/node_exporter"
  tags: [monitoring, install, node_exporter]

- name: Install node_exporter binary
  ansible.builtin.copy:
    src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}/node_exporter"
    dest: "{{ node_exporter_install_dir }}/node_exporter"
    mode: '0755'
    owner: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    remote_src: true
  notify: Restart node_exporter
  tags: [monitoring, install, node_exporter]

- name: Create node_exporter systemd service
  ansible.builtin.template:
    src: node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    mode: '0644'
  notify: Restart node_exporter
  tags: [monitoring, configure, node_exporter]

- name: Enable and start node_exporter service
  ansible.builtin.systemd:
    name: node_exporter
    enabled: true
    state: started
    daemon_reload: true
  tags: [monitoring, configure, node_exporter]

- name: Open firewall port for node_exporter (firewalld)
  ansible.posix.firewalld:
    port: "{{ node_exporter_port }}/tcp"
    zone: "{{ item }}"
    permanent: true
    immediate: true
    state: enabled
  loop: "{{ monitoring_firewall_zones }}"
  when:
    - monitoring_enable_firewall
    - ansible_os_family == "RedHat"
  tags: [monitoring, firewall, node_exporter]

- name: Open firewall port for node_exporter (ufw)
  community.general.ufw:
    rule: allow
    port: "{{ node_exporter_port }}"
    proto: tcp
  when:
    - monitoring_enable_firewall
    - ansible_os_family == "Debian"
  tags: [monitoring, firewall, node_exporter]

# Promtail installation
- name: Create promtail system group
  ansible.builtin.group:
    name: "{{ promtail_group }}"
    system: true
    state: present
  tags: [monitoring, install, promtail]

- name: Create promtail system user
  ansible.builtin.user:
    name: "{{ promtail_user }}"
    group: "{{ promtail_group }}"
    system: true
    shell: /usr/sbin/nologin
    create_home: false
    state: present
  tags: [monitoring, install, promtail]

- name: Create promtail directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: "{{ promtail_user }}"
    group: "{{ promtail_group }}"
  loop:
    - "{{ promtail_config_dir }}"
    - "{{ promtail_data_dir }}"
  tags: [monitoring, install, promtail]

- name: Download promtail binary
  ansible.builtin.get_url:
    url: "https://github.com/grafana/loki/releases/download/v{{ promtail_version }}/promtail-linux-{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}.zip"
    dest: "/tmp/promtail-{{ promtail_version }}.zip"
    mode: '0644'
  tags: [monitoring, install, promtail]

- name: Extract promtail binary
  ansible.builtin.unarchive:
    src: "/tmp/promtail-{{ promtail_version }}.zip"
    dest: /tmp
    remote_src: true
    creates: "/tmp/promtail-linux-{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"
  tags: [monitoring, install, promtail]

- name: Install promtail binary
  ansible.builtin.copy:
    src: "/tmp/promtail-linux-{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"
    dest: "{{ promtail_install_dir }}/promtail"
    mode: '0755'
    owner: "{{ promtail_user }}"
    group: "{{ promtail_group }}"
    remote_src: true
  notify: Restart promtail
  tags: [monitoring, install, promtail]

- name: Create promtail configuration
  ansible.builtin.template:
    src: promtail.yaml.j2
    dest: "{{ promtail_config_dir }}/promtail.yaml"
    mode: '0644'
    owner: "{{ promtail_user }}"
    group: "{{ promtail_group }}"
  notify: Restart promtail
  tags: [monitoring, configure, promtail]

- name: Create promtail systemd service
  ansible.builtin.template:
    src: promtail.service.j2
    dest: /etc/systemd/system/promtail.service
    mode: '0644'
  notify: Restart promtail
  tags: [monitoring, configure, promtail]

- name: Enable and start promtail service
  ansible.builtin.systemd:
    name: promtail
    enabled: true
    state: started
    daemon_reload: true
  tags: [monitoring, configure, promtail]

- name: Clean up temporary files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "/tmp/node_exporter-{{ node_exporter_version }}.tar.gz"
    - "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"
    - "/tmp/promtail-{{ promtail_version }}.zip"
  tags: [monitoring, cleanup]
